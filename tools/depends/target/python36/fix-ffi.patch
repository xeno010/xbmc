--- Modules/_ctypes/malloc_closure.c.orig	2017-08-06 19:18:47.412010000 +0530
+++ Modules/_ctypes/malloc_closure.c	2017-08-06 19:21:37.760010000 +0530
@@ -89,6 +89,7 @@
 /******************************************************************/
 
 /* put the item back into the free list */
+/*
 void ffi_closure_free(void *p)
 {
     ITEM *item = (ITEM *)p;
@@ -96,7 +97,6 @@
     free_list = item;
 }
 
-/* return one item from the free list, allocating more if needed */
 void *ffi_closure_alloc(size_t ignored, void** codeloc)
 {
     ITEM *item;
@@ -109,3 +109,4 @@
     *codeloc = (void *)item;
     return (void *)item;
 }
+*/
--- Modules/_ctypes/cfield.c.orig	2017-08-06 19:19:03.724010000 +0530
+++ Modules/_ctypes/cfield.c	2017-08-06 19:32:45.592010000 +0530
@@ -1639,6 +1639,7 @@
 */
 
 /* align and size are bogus for void, but they must not be zero */
+/*
 ffi_type ffi_type_void = { 1, 1, FFI_TYPE_VOID };
 
 ffi_type ffi_type_uint8 = { 1, 1, FFI_TYPE_UINT8 };
@@ -1655,14 +1656,15 @@
 
 ffi_type ffi_type_float = { sizeof(float), FLOAT_ALIGN, FFI_TYPE_FLOAT };
 ffi_type ffi_type_double = { sizeof(double), DOUBLE_ALIGN, FFI_TYPE_DOUBLE };
+*/
 
 #ifdef ffi_type_longdouble
 #undef ffi_type_longdouble
 #endif
-  /* This is already defined on OSX */
+  /* This is already defined on OSX
 ffi_type ffi_type_longdouble = { sizeof(long double), LONGDOUBLE_ALIGN,
                                  FFI_TYPE_LONGDOUBLE };
 
 ffi_type ffi_type_pointer = { sizeof(void *), VOID_P_ALIGN, FFI_TYPE_POINTER };
-
+  */
 /*---------------- EOF ----------------*/
